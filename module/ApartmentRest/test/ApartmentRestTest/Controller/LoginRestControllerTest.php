<?php

namespace ApartmentRest\Controller;

use ApartmentRestTest\Bootstrap;
use ApartmentRest\Controller\LoginRestController;
use Zend\Http\Request;
use Zend\Http\Response;
use Zend\Mvc\MvcEvent;
use Zend\Mvc\Router\RouteMatch;
use Zend\Mvc\Router\Http\TreeRouteStack as HttpRouter;
use PHPUnit_Framework_TestCase;
use Apartment\Model\UserTable;
use Zend\View\Model\JsonModel;

/**
 * Test class for LoginRestController.
 * Generated by PHPUnit on 2013-10-30 at 14:48:13.
 */
class LoginRestControllerTest extends PHPUnit_Framework_TestCase {
	protected $controller;
	protected $request;
	protected $response;
	protected $routeMatch;
	protected $event;
	protected function setUp() {
		$serviceManager = Bootstrap::getServiceManager ();
		$this->controller = new LoginRestController ();
		$this->request = new Request ();
		$this->routeMatch = new RouteMatch ( array (
				'controller' => 'index' 
		) );
		$this->event = new MvcEvent ();
		$config = $serviceManager->get ( 'Config' );
		$routerConfig = isset ( $config ['router'] ) ? $config ['router'] : array ();
		$router = HttpRouter::factory ( $routerConfig );
		$this->event->setRouter ( $router );
		$this->event->setRouteMatch ( $this->routeMatch );
		$this->controller->setEvent ( $this->event );
		$this->controller->setServiceLocator ( $serviceManager );
	}
	
	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {
	}
	public function testCreate() {
		
		// Testen mit richtigen Angaben, nicht Admin
		$user = $this->controller->getUserTable ()->randomUser ( false );
		$name = $user->name;
		$password = $user->password;
		
		$json = new JsonModel ( array (
				
				'name' => $name,
				'password' => $password 
		) );
		$result = $this->controller->create ( $json );
		
		// Wird ein JSON zurückgegeben?
		$this->assertInstanceOf ( 'Zend\View\Model\JsonModel', $result );
		
		// Enthält der JSON den Eintrag 'response'?
		$this->assertTrue ( $result->__isset ( 'response' ) );
		// Ist der response positiv?
		$this->assertEquals ( 'positive', $result->__get ( 'response' ) );
		// Enthält der JSON den Eintrag 'apartment'?
		$this->assertTrue ( $result->__isset ( 'apartment' ) );
		
		// Falsche Eingaben
		$name = $name . 'BLA!';
		$password = $password . 'BLA!';
		
		$json = new JsonModel ( array (
				
				'name' => $name,
				'password' => $password 
		) );
		
		$result = $this->controller->create ( $json );
		
		$this->assertTrue ( $result->__isset ( 'response' ) );
		$this->assertEquals ( 'negative', $result->__get ( 'response' ) );
		
		// Richtige Eingaben, Admin
		// Testen mit richtigen Angaben, nicht Admin
		$user = $this->controller->getUserTable ()->randomUser ( true );
		$name = $user->name;
		$password = $user->password;
		
		$json = new JsonModel ( array (
				
				'name' => $name,
				'password' => $password 
		) );
		$result = $this->controller->create ( $json );
		
		$this->assertTrue ( $result->__isset ( 'response' ) );
		$this->assertEquals ('negative', $result->__get ( 'response' ) );
	}
	// Kann man die Postmethode erreichen?
	public function testCreateCanBeAccessed() {
		$this->request->setMethod ( 'post' );
		
		$result = $this->controller->dispatch ( $this->request );
		$response = $this->controller->getResponse ();
		
		$this->assertEquals ( 200, $response->getStatusCode () );
	}
	// Gibt die Methode wirklich eine UserTable zurueck
	public function testGetUserTableReturnsAUserTable() {
		$this->assertInstanceOf ( 'Apartment\Model\UserTable', $this->controller->getUserTable () );
	}
}
?>
